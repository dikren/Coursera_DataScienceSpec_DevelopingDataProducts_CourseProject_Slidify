rep(2 , 10)
X = c(rep(1, sumXi), rep(0, n - sumXi))
sum(X)
dim(X)
length(X)
unique(X)
1/(n-1) * sum((X - 1/n*(sum(X)))^2)
se(X)
sd(X)
sqrt(1/(n-1) * sum((X - 1/n*(sum(X)))^2))
se_est = sd(X)
quantile = (1/n * sumXi - p)/se_est
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F)) / 2
quantile = (1/n * sumXi - p)/se
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F)) / 2
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)
quantile = (1/n * sumXi - p)/se
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F)) / 2
quantile = (1/n * sumXi - p)/se_est
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F)) / 2
?t.test
t.test(X)
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F))
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)
quantile_est = (1/n * sumXi - p)/se_est
(1 - pnorm(q = quantile_est,mean = 0, sd = 1, lower.tail = F))
quantile = (1/n * sumXi - p)/se
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F))
t.test(X, mu = p)
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
t.test(X, mu = p)
pt(q = quantile_est, df = n - 1)
pt(q = quantile_est, df = n - 1) / 2
(1 - pnorm(q = quantile_est,mean = 0, sd = 1, lower.tail = F)) /2
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F)) /2
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)
quantile_est = (1/n * sumXi - p)/se_est
(1 - pnorm(q = quantile_est,mean = 0, sd = 1, lower.tail = F)) /2
quantile = (1/n * sumXi - p)/se
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F)) /2
sqrt(1/(n-1) * sum((X - 1/n*(sum(X)))^2))
t.test(X, mu = p)
pt(q = quantile_est, df = n - 1) / 2
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)
quantile_est = (1/n * sumXi - p)/se_est
(1 - pnorm(q = quantile_est,mean = 0, sd = 1, lower.tail = F)) /2
quantile = (1/n * sumXi - p)/se
(1 - pnorm(q = quantile,mean = 0, sd = 1, lower.tail = F)) /2
sqrt(1/(n-1) * sum((X - 1/n*(sum(X)))^2))
t.test(X, mu = p)
pt(q = quantile_est, df = n - 1) / 2
pt(q = quantile, df = n - 1) / 2
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)
quantile_est = (1/n * sumXi - p)/se_est
quantile = (1/n * sumXi - p)/se
t.test(X, mu = p)
pt(q = quantile_est, df = n - 1) * 2
pt(q = quantile, df = n - 1) * 2
pt(q = quantile_est, df = n - 1)
pt(q = quantile, df = n - 1)
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
t.test(X, mu = p)
p/se
e/se_est
p/se_est
quantile_est = (1/n * sumXi - p)/se_est
se_est = sd(X)
quantile_est = (1/n * sumXi - p)/se_est
pt(q = quantile_est, df = n - 1)
pt(q = quantile_est*100, df = n - 1)
pt(q = quantile_est*100, df = n - 1) *2
pt(q = quantile_est, df = n - 1) *2
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pt(q = quantile_est, df = n - 1) *2
t.test(X, mu = p)
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pt(q = quantile_est, df = n - 1) *2
t.test(X, mu = p)
(1 - pnorm(q = quantile_est,mean = 0, sd = 1, lower.tail = F)) /2
pnorm(q = quantile_est,mean = 0, sd = 1) *2
pnorm(q = quantile,mean = 0, sd = 1) *2
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
(p - sumXi/n)
1 - 2* exp(-2*n*(p - sumXi/n))
exp(-2*n*(p - sumXi/n))
n = 1000
sumXi = 20
exp(-2*n*(p - sumXi/n))
1 - 2* exp(-2*n*(p - sumXi/n))
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
sqrt(1/(n-1) * sum((X - 1/n*(sum(X)))^2))
t.test(X, mu = p)
pt(q = quantile_est, df = n - 1) *2
pt(q = quantile, df = n - 1)
pt(q = quantile, df = n - 1) * 2
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
quantile
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile_est = (1/n * sumXi - p)/se_est
pnorm(q = quantile_est,mean = 0, sd = 1) *2
quantile = (1/n * sumXi - p)/se
pnorm(q = quantile,mean = 0, sd = 1) *2
quantile
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
n = 1000
sumXi = 20
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
qnorm(0.025, 0, 1)
qnorm(1 - 0.025, 0, 1, lower.tail = F)
qnorm(0.025, 0, 1, lower.tail = F)
1/n * sumXi + c(-1, 1) * se * qnorm(0.025, 0, 1, lower.tail = F)
n = 10000
sumXi = 200
X = c(rep(1, sumXi), rep(0, n - sumXi))
p = 0.03
se = sqrt(p*(1-p)/n)
se_est = sd(X)/sqrt(n)
quantile = (1/n * sumXi - p)/se
1/n * sumXi + c(-1, 1) * se * qnorm(0.025, 0, 1, lower.tail = F)
packageUrls = c("http://cran.r-project.org/src/contrib/AppliedPredictiveModeling_1.1-6.tar.gz",
"http://cran.r-project.org/src/contrib/Archive/caret/caret_6.0-47.tar.gz",
"http://cran.r-project.org/src/contrib/Archive/ElemStatLearn/ElemStatLearn_2012.04-0.tar.gz",
"http://cran.r-project.org/src/contrib/Archive/pgmm/pgmm_1.1.tar.gz",
"http://cran.r-project.org/src/contrib/Archive/rpart/rpart_4.1-8.tar.gz",
"http://cran.r-project.org/src/contrib/Archive/gbm/gbm_2.1.tar.gz",
"http://cran.r-project.org/src/contrib/lubridate_1.3.3.tar.gz",
"http://cran.r-project.org/src/contrib/Archive/forecast/forecast_5.6.tar.gz",
"http://cran.r-project.org/src/contrib/Archive/e1071/e1071_1.6-4.tar.gz"
)
for (url in packageUrls) {
install.packages(url, repos=NULL, type="source", dependencies = TRUE)
}
setwd("D:/WorkDirectory/Coursera/The Data Science Specialization/Developing Data Products/CourseProject/1")
library(Shiny)
install.packages('Shiny')
install.packages('shiny')
library(shiny)
runApp()
runApp()
data("iris")
head(iris)
km = kmeans(iris[, 1:4], centers = 3)
head(k)
names(k)
names(km)
headn(km)
head(km)
cbind(iris, km$cluster)
cbind(iris, km$cluster)
str(iris)
clusteredIris = cbind(iris, factor(km$cluster))
str(clusteredIris)
names(clusteredIris)[6] = "clusterNum"
str(clusteredIris)
ggplot(data = cbind(iris, km$cluster), aes(x = Species, y = clusterNum)) +
geom_point()
library(ggplot2)
ggplot(data = cbind(iris, km$cluster), aes(x = Species, y = clusterNum)) +
geom_point()
ggplot(data = clusteredIris, aes(x = Species, y = clusterNum)) +
geom_point()
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species, type = clusterNum))
?geom_point
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species, shape = clusterNum))
km = kmeans(iris[, 1:4], centers = 7)
clusteredIris = cbind(iris, factor(km$cluster))
names(clusteredIris)[6] = "clusterNum"
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species, shape = clusterNum))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Petal.Length, color = clusterNum, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = clusterNum, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Petal.Width, color = Species, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Length, color = Species, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = Species, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Petal.Length, y = Petal.Width, color = Species, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = Species, shape = Species))
km = kmeans(iris[, 1:4], centers = 9999999)
km = kmeans(iris[, 1:4], centers = -3)
km = kmeans(iris[, 1:4], centers = -3)
km = kmeans(iris[, 1:4], centers = 30)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = clusterNum, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, size = clusterNum, color = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4)
km = kmeans(iris[, 1:4], centers = 5)
clusteredIris = cbind(iris, factor(km$cluster))
names(clusteredIris)[6] = "clusterNum"
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4)
?shiny
ggplot(data = clusteredIris) +
geom_point(aes(x = Petal.Width, y = Petal.Width, color = Species, shape = Species))
ggplot(data = clusteredIris) +
geom_point(aes(x = Petal.Width, y = Petal.Width, color = Species, shape = Species), alpha = 0.2)
ggplot(data = clusteredIris) +
geom_point(aes(x = Petal.Width, y = Petal.Width, color = Species, shape = Species), alpha = 0.2, size = 4)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4, aplha = 0.2)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4, aplha = 0.2)
?aes_colour_fill_alpha
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4, aplha = 2 )
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4, aplha = 0)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), alpha = 0.2, size = 4)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4, alpha = 0.2)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), alpha = 0.6, size = 4)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4)
iris$Species
levels(iris$Species)
names(iris)
runApp()
plot(iris)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
km = kmeans(iris[, 1:4], centers = 1)
head(km)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4)
clusteredIris = cbind(iris, factor(km$cluster))
names(clusteredIris)[6] = "clusterNum"
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4)
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
km
km = kmeans(iris[, 1:4], centers = 4)
clusteredIris = cbind(iris, factor(km$cluster))
names(clusteredIris)[6] = "clusterNum"
km$cluster
km$centers
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = km$centers, aes(x = Sepal.Width, y = Petal.Width), shape = 4)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = data.frame(km$centers), aes(x = Sepal.Width, y = Petal.Width), shape = 4)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = data.frame(km$centers), aes(x = Sepal.Width, y = Petal.Width), shape = 4, size = 8)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = data.frame(km$centers), aes(x = Sepal.Width, y = Petal.Width), shape = 4, size = 8, width = 2)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = data.frame(km$centers), aes(x = Sepal.Width, y = Petal.Width), shape = 4, size = 8, width = 20)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = data.frame(cbind(km$centers, num = 1:5)), aes(x = Sepal.Width, y = Petal.Width, color = num), shape = 4, size = 8)
km$centers
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = data.frame(cbind(km$centers, num = 1:4)), aes(x = Sepal.Width, y = Petal.Width, color = num), shape = 4, size = 8)
ggplot(data = clusteredIris) +
geom_point(aes(x = Sepal.Width, y = Petal.Width, color = clusterNum, shape = Species), size = 4) +
geom_point(data = data.frame(cbind(km$centers, num = factor(1:4))), aes(x = Sepal.Width, y = Petal.Width, color = num), shape = 4, size = 8)
data.frame(cbind(km$centers, num = factor(1:4)))
str(data.frame(cbind(km$centers, num = factor(1:4))))
str(data.frame(cbind(km$centers, num = as.factor(1:4))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_point
runApp()
runApp()
runApp()
runApp()
runApp()
?aes_linetype_size_shape
df2 <- data.frame(x = 1:5 , y = 1:25, z = 1:25)
s <- ggplot(df2, aes(x = x, y = y))
s + geom_point(aes(shape = z), size = 4) + scale_shape_identity()
runApp()
levels(iris$Species)
ggplot() +
geom_point(data = clusteredIris,
aes_string(x = input$xAxisName, y = input$yAxisName, color = "clustNum", shape = "Species"),
size = input$pointSize) +
scale_shape_manual(name = "Species", breaks = c("setosa", "versicolor", "virginica"), values = c(1, 2, 3))
runApp()
runApp()
runApp()
runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyapps")
library("devtools", lib.loc="~/R/win-library/3.2")
devtools::install_github('rstudio/shinyapps')
library("shinyapps", lib.loc="~/R/win-library/3.2")
library("shiny", lib.loc="~/R/win-library/3.2")
shinyapps::setAccountInfo(name='dikren', token='E5CE1013EDF6F92E36E9A904AD6E6A93', secret='fMUBtjOlJmpRzFWMXCmcZs3uoam3DaYbkBDSr0YR')
shinyapps::deployApp()
shinyapps::deployApp("D:/WorkDirectory/Coursera/The Data Science Specialization/Developing Data Products/CourseProject/1")
library(shinyapps)
shinyapps::deployApp("D:/WorkDirectory/Coursera/The Data Science Specialization/Developing Data Products/CourseProject/1")
?shinyapps::deployApp("D:/WorkDirectory/Coursera/The Data Science Specialization/Developing Data Products/CourseProject/1")
?shinyapps::deployApp(_
?shinyapps::deployApp()
?deployApp()
shinyapps::deployApp("D:/WorkDirectory/Coursera/The Data Science Specialization/Developing Data Products/CourseProject/1", appName = "K-means behaviour investigation")
shinyapps::deployApp("D:/WorkDirectory/Coursera/The Data Science Specialization/Developing Data Products/CourseProject/1", appName = "KMeansBehaviourInvestigation")
setwd("D:/WorkDirectory/Coursera/The Data Science Specialization/Developing Data Products/CourseProject/2")
library(slidify)
author("CourseProject")
slidify('index.Rmd')
apply(matrix(rexp(1000*10), nrow = 10), MARGIN = 2, FUN = mean)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
suppressMessages(library(ggplot2))
g = ggplot() + geom_histogram(x = x1)
g
ggplot() + geom_histogram(x = x1)
ggplot() + geom_histogram(aes(x = x1))
g1 = ggplot() + geom_histogram(aes(x = x1))
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
g1 = ggplot() + geom_histogram(aes(x = x1))
g2 = ggplot() + geom_histogram(aes(x = x10))
g3 = ggplot() + geom_histogram(aes(x = x100))
g4 = ggplot() + geom_histogram(aes(x = x1000))
g = gridExtra(g1, g2, g3, g4, ncol = 2)
g = grid.arrange(g1, g2, g3, g4, ncol = 2)
suppressMessages(g = grid.arrange(g1, g2, g3, g4, ncol = 2))
ggplot() + geom_histogram(aes(x = x1), binwidth = range(x1)/30)
ggplot() + geom_histogram(aes(x = x1), binwidth = 30)
geom_histogram(aes(x = x1), binwidth = 3)
ggplot() + geom_histogram(aes(x = x1), binwidth = 3)
ggplot() + geom_histogram(aes(x = x1), binwidth = 0.5)
?max
ggplot() + geom_histogram(aes(x = x1), binwidth = NULL)
slidify('index.Rmd')
g = grid.arrange(g1, g2, g3, g4, ncol = 2)
g
plot(g)
g1
plot(g)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
